# This configures Nginx as a reverse proxy.

# Sets the user for worker processes.
user nginx;
# Sets the number of worker processes. 'auto' is usually a good choice.
worker_processes auto;

events {
    # The maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

http {
    # Defines the MIME types for file extensions.
    include /etc/nginx/mime.types;
    # Specifies the default MIME type.
    default_type application/octet-stream;

    # Sets the maximum allowed size of the client request body.
    # This is crucial for allowing large file uploads (e.g., 50MB).
    client_max_body_size 50M;

    # Upstream server groups. This is where we define our backend and frontend services.
    upstream frontend {
        # The Flask service, running on port 8501 inside the Docker network.
        server frontend:8501;
    }

    upstream backend {
        # The FastAPI service, running on port 3000 inside the Docker network.
        server backend:3000;
    }

    # The main server block that listens for incoming connections.
    server {
        # Listen on port 80, the standard HTTP port.
        listen 80;

        # Location block for API requests.
        # Any request with a URL starting with /api/ will be handled here.
        location /api/ {
        rewrite /api/(.*) /$1 break;
        proxy_pass http://backend;

        # Add these lines to increase the timeout
        proxy_connect_timeout 900s;
        proxy_send_timeout 900s;
        proxy_read_timeout 900s;
        send_timeout 900s;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

        # Location block for all other requests (the root).
        # This will serve our Flask frontend.
        location / {
            # Passes the request to the 'frontend' upstream group.
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
